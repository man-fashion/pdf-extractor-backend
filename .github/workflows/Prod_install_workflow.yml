name: PROD - Build & Deploy ManFashion Backend to AWS

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    if: false  # This will disable the job from running
    runs-on: ubuntu-latest
    name: Build, Package, and Deploy Backend
    environment: Dev
    permissions:
      id-token: write
      contents: read
  
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install jq
        run: |
          sudo apt-get install -y jq

     
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
            aws-access-key-id: ${{ secrets.Access_key_ID }}
            aws-secret-access-key: ${{ secrets.Secret_access_key }}
            aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Create env file
        run: |
              cd /home/runner/work/pdf-extractor-backend/pdf-extractor-backend
              echo "MONGO_URI='${{ secrets.MONGO_URI }}'" >> .env
              echo "Bucket_Name='${{ secrets.Bucket_Name }}'" >> .env
              echo "Access_key_ID='${{ secrets.Access_key_ID }}'" >> .env
              echo "Secret_access_key='${{ secrets.Secret_access_key }}'" >> .env
              echo "AWS_REGION='${{ secrets.AWS_REGION }}'" >> .env
              echo pwd

      
      - name: Echo current path after creating .env file
        run: |
          cd /home/runner/work/pdf-extractor-backend/pdf-extractor-backend
          echo "Current path after creating .env file: $(pwd)"
          ls -lart

              
      - name: Verify Docker Version and build arch //Our end server is using ARM64
        run: docker version --format '{{.Server.Version}}'
          
      - name: Install Docker Buildx
        run: |
              mkdir -p ~/.docker/cli-plugins
              curl -SL https://github.com/docker/buildx/releases/download/v0.7.1/buildx-v0.7.1.linux-amd64 -o ~/.docker/cli-plugins/docker-buildx
              chmod a+x ~/.docker/cli-plugins/docker-buildx
          
      - name: Set up QEMU
        if: runner.os != 'Linux'
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          
      - name: Build Docker Image, Tag Docker Image and Push Docker Image to ECR
        id: build-docker-step
        run: 
          |
          cd /home/runner/work/pdf-extractor-backend/pdf-extractor-backend
          docker build -t man_fashion_image:latest .
          docker save man_fashion_image:latest -o man_fashion_image.tar
     
      - name: Copy Docker image to Azure VM
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.AZURE_VM_HOST }}
          username: ${{ secrets.AZURE_VM_USERNAME }}
          key: ${{ secrets.AZURE_VM_PRIVATE_KEY }}
          source: man_fashion_image.tar
          target: /home/${{ secrets.AZURE_VM_USERNAME }}/man_fashion_image.tar

      - name: SSH and deploy Docker image
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.AZURE_VM_HOST }}
          username: ${{ secrets.AZURE_VM_USERNAME }}
          key: ${{ secrets.AZURE_VM_PRIVATE_KEY }}
          script: |
           # Check if port 5050 is in use
           if lsof -i:5050 -t > /dev/null; then
              echo "Error: Port 5050 is already in use. Exiting."
              exit 1
            fi
            #Stop and remove old container if exists
            if [ $(docker ps -q -f name=manfashion_container) ]; then
              docker stop manfashion_container
              docker rm manfashion_container
            fi
        
            #Load and run new Docker image
            docker load -i /home/${{ secrets.AZURE_VM_USERNAME }}/man_fashion_image.tar/man_fashion_image.tar
            docker run -d -p 5050:5050 --cpus="0.5" -m="768m" --name manfashion_container man_fashion_image:latest
        
            #Cleanup old Docker images
            docker rmi $(docker images -q --filter "dangling=true")
